import React from 'react';
export declare type Storable = boolean | string | number | object;
export declare type StorageValue<T = Storable> = T | null;
export declare type StorageSetter<T = Storable> = (a: T) => void;
export declare type StorageRemover = () => void;
export declare type StorageOperations<T = Storable> = [StorageValue<T>, StorageSetter<T>, StorageRemover];
export interface StorageMap {
    [key: string]: StorageOperations<Storable>;
}
export declare const withStorage: <T extends string>(keys?: T[], storageType?: "session" | "local", prefix?: string) => <WrappedProps extends object>(WrappedComponent: React.ComponentType<WrappedProps>) => React.ComponentType<WrappedProps>;
